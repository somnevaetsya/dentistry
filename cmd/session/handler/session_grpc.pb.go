// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: handler/session.proto

package handler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionCheckerClient is the client API for SessionChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionCheckerClient interface {
	Create(ctx context.Context, in *SessionModel, opts ...grpc.CallOption) (*Nothing, error)
	Get(ctx context.Context, in *SessionValue, opts ...grpc.CallOption) (*UserId, error)
	Delete(ctx context.Context, in *SessionValue, opts ...grpc.CallOption) (*Nothing, error)
	CreateCode(ctx context.Context, in *CodeModel, opts ...grpc.CallOption) (*Nothing, error)
	GetCode(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Code, error)
	DeleteCode(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Nothing, error)
}

type sessionCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionCheckerClient(cc grpc.ClientConnInterface) SessionCheckerClient {
	return &sessionCheckerClient{cc}
}

func (c *sessionCheckerClient) Create(ctx context.Context, in *SessionModel, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionCheckerClient) Get(ctx context.Context, in *SessionValue, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionCheckerClient) Delete(ctx context.Context, in *SessionValue, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionCheckerClient) CreateCode(ctx context.Context, in *CodeModel, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/CreateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionCheckerClient) GetCode(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Code, error) {
	out := new(Code)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionCheckerClient) DeleteCode(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/handler.SessionChecker/DeleteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionCheckerServer is the server API for SessionChecker service.
// All implementations must embed UnimplementedSessionCheckerServer
// for forward compatibility
type SessionCheckerServer interface {
	Create(context.Context, *SessionModel) (*Nothing, error)
	Get(context.Context, *SessionValue) (*UserId, error)
	Delete(context.Context, *SessionValue) (*Nothing, error)
	CreateCode(context.Context, *CodeModel) (*Nothing, error)
	GetCode(context.Context, *UserId) (*Code, error)
	DeleteCode(context.Context, *UserId) (*Nothing, error)
	mustEmbedUnimplementedSessionCheckerServer()
}

// UnimplementedSessionCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedSessionCheckerServer struct {
}

func (UnimplementedSessionCheckerServer) Create(context.Context, *SessionModel) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionCheckerServer) Get(context.Context, *SessionValue) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSessionCheckerServer) Delete(context.Context, *SessionValue) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSessionCheckerServer) CreateCode(context.Context, *CodeModel) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCode not implemented")
}
func (UnimplementedSessionCheckerServer) GetCode(context.Context, *UserId) (*Code, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedSessionCheckerServer) DeleteCode(context.Context, *UserId) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCode not implemented")
}
func (UnimplementedSessionCheckerServer) mustEmbedUnimplementedSessionCheckerServer() {}

// UnsafeSessionCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionCheckerServer will
// result in compilation errors.
type UnsafeSessionCheckerServer interface {
	mustEmbedUnimplementedSessionCheckerServer()
}

func RegisterSessionCheckerServer(s grpc.ServiceRegistrar, srv SessionCheckerServer) {
	s.RegisterService(&SessionChecker_ServiceDesc, srv)
}

func _SessionChecker_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).Create(ctx, req.(*SessionModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionChecker_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).Get(ctx, req.(*SessionValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionChecker_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).Delete(ctx, req.(*SessionValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionChecker_CreateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).CreateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/CreateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).CreateCode(ctx, req.(*CodeModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionChecker_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).GetCode(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionChecker_DeleteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionCheckerServer).DeleteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.SessionChecker/DeleteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionCheckerServer).DeleteCode(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionChecker_ServiceDesc is the grpc.ServiceDesc for SessionChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handler.SessionChecker",
	HandlerType: (*SessionCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SessionChecker_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SessionChecker_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SessionChecker_Delete_Handler,
		},
		{
			MethodName: "CreateCode",
			Handler:    _SessionChecker_CreateCode_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _SessionChecker_GetCode_Handler,
		},
		{
			MethodName: "DeleteCode",
			Handler:    _SessionChecker_DeleteCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler/session.proto",
}
